()
{
	if (numframes == 0)
	{
		enum {SIZ=64}; static buf[SIZ][SIZ][SIZ];
		r = 0; g = 0; b = 0; k = 2/SIZ;
		for(iz=0,i=0;iz<SIZ;iz++)
			for(z=(iz+.5)*k-1,iy=0;iy<SIZ;iy++)
				for(y=(iy+.5)*k-1,ix=0;ix<SIZ;ix++,i++)
				{
					issol = voxfunc((ix+.5)*k-1,z,-y,&r,&g,&b);
					buf[i] = rgba(r,g,b,(issol!=0)*48);
				}
		glsettex(0,buf,SIZ,SIZ,SIZ,KGL_BGRA32);

		glAlphaEnable();
		glbindtexture(0);
		glsetshader(0);
	}

	ha = mousx/xres*(PI*2); c = cos(ha); s = sin(ha);
	dep = (mousy/yres)*4;
	glBegin(GL_QUADS); k = .5/SIZ;
	for(oz=-sqrt(2);oz<sqrt(2);oz+=k)
	{
		ox0 = -sqrt(2); oz0 = oz; x0 = c*ox0 - s*oz0; z0 = c*oz0 + s*ox0;
		ox1 = +sqrt(2); oz1 = oz; x1 = c*ox1 - s*oz1; z1 = c*oz1 + s*ox1;
			  if (x0 < -1) { if (x1 < -1) continue; z0 = (-1-x0)*(z1-z0)/(x1-x0)+z0; x0 = -1; }
		else if (x0 > +1) { if (x1 > +1) continue; z0 = (+1-x0)*(z1-z0)/(x1-x0)+z0; x0 = +1; }
			  if (z0 < -1) { if (z1 < -1) continue; x0 = (-1-z0)*(x1-x0)/(z1-z0)+x0; z0 = -1; }
		else if (z0 > +1) { if (z1 > +1) continue; x0 = (+1-z0)*(x1-x0)/(z1-z0)+x0; z0 = +1; }
			  if (x1 < -1) {                        z1 = (-1-x1)*(z1-z0)/(x1-x0)+z1; x1 = -1; }
		else if (x1 > +1) {                        z1 = (+1-x1)*(z1-z0)/(x1-x0)+z1; x1 = +1; }
			  if (z1 < -1) {                        x1 = (-1-z1)*(x1-x0)/(z1-z0)+x1; z1 = -1; }
		else if (z1 > +1) {                        x1 = (+1-z1)*(x1-x0)/(z1-z0)+x1; z1 = +1; }

		for(i=0;i<4;i++)
		{
			if ((i == 0) || (i == 3)) { tx = x0; tz = z0; }
										else { tx = x1; tz = z1; }
			ty = (i>=2)*2-1;

			nx = c*tx + s*tz;
			ny = ty;
			nz = c*tz - s*tx;

			glTexCoord(tx/2+.5,ty/2+.5,tz/2+.5);
			glVertex(nx,ny,nz-dep);
		}
	}
	glEnd();
}

voxfunc (x,y,z,&r,&g,&b)
{ //lamp.kc :)
r = x*128+128;
g = y*128+128;
b = z*128+128;

x0 = 0; y0 = 0; z0 =-2;
x1 = 0; y1 = 0; z1 = 0;

if ((x^2+y^2 < .08^2) && (z > -.3)) return(1);
if ((z > .9) && (x^2+y^2 < .4^2)) return(1);
if (z > 0) return(0);

if (x^2+y^2+(z+.6)^2 < .15^2)
	{ r = 255; g = 255; b = 144; return(1); }
if ((x^2+y^2 < .11^2) && (z > -.6) && (z < -.3))
	{ r = 192; g = 192; b = 112; return(1); }

	//Cone equation: a . b = |a||b|cos(ang)
c = (x-x0)*(x1-x0) + (y-y0)*(y1-y0) + (z-z0)*(z1-z0);
d = (x-x0)^2+(y-y0)^2+(z-z0)^2;
e = (x1-x0)^2+(y1-y0)^2+(z1-z0)^2;
c *= c; d *= e;
if (c > d*cos(20*PI/180)^2)
	if (c < d*(cos(18*PI/180)^2))
		return(1);
0
}

@v: //================================

varying vec4 p, v, c, t;
varying vec3 n;
void main ()
{
	gl_Position = ftransform();
	p = gl_Position;
	v = gl_Vertex;
	n = gl_Normal;
	c = gl_Color;
	t = gl_MultiTexCoord0;
}

@f: //================================

varying vec4 p, v, c, t; varying vec3 n;
uniform sampler3D tex0;
void main ()
{
	gl_FragColor = texture3D(tex0,vec3(t.s,t.t,t.p));
}
