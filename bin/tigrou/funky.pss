//tigrou 02.01.2010 (tigrou.ind at gmail.com)
()
{
   t = klock(); 
   setfov(62.79);

   glsetshader(0);
   glcapture();
      scene(t);
   glcaptureend(0);

   glsetshader(1);
   glcolor(t, 1, 1);
   glquad();

}

mix(a, b, t)
{
   return (a * (1 - t) + b * t);
}

scene(t)
{
   //camera
   static ra[3], rb[3];
   ra[0] = 16;
   ra[1] = 65;
   ra[2] = 25;

   rb[0] = 115;
   rb[1] = 155;
   rb[2] = 205;

   n = 2;
   ii = (int(t / n) % 3);
   tt = -(t / n) % 1;
   tt = 1 / (pow(2.71 * 0.5, (tt + 0.5) * 32) + 1);

   gltranslate(-1.3, 0, -4.5);
   glrotate(mix(ra[ii], ra[ii + 1], tt), 1, 0, 0);
   glrotate(mix(rb[ii], rb[ii + 1], tt), 0, 1, 0);

   //desk
   glpushmatrix();
      glcolor(0.8, 0.62, 0.13);
      glscale(3.7, 0.13, 1.4);
      cube();
   glpopmatrix();

   turntable( 1, t);
   turntable(-1, t);

   //mixer
   gltranslate(0, 0.3, 0.4);
   glscale(0.6, 0.1, 0.9);
   glcolor(0.8, 0.6, 0.23);
   cube();
}

turntable(a, t)
{

   glpushmatrix();

      gltranslate(2.1 * a, 0.35, 0.4);
   
      glpushmatrix();
         gltranslate(-1.2, 0.1, 0.65);
         glcolor(0, 0, 0);
         cylinder(0.10, 0.10);
      glpopmatrix();
   
      //vinyl   
      glpushmatrix();
         gltranslate(-0.4, 0.06, 0);
         glrotate(-t * 100, 0, 1, 0);
      
         glcolor(0.2, 0.2, 0.2);
         cylinder(0.8, 0.1);
         gltranslate(0, 0.01, 0);
         glcolor(0.85, 0.2, 0.23);
         cylinder(0.28, 0.1);
         glcolor(0.2, 0.2, 0.2);
         gltranslate(0, 0.1, 0);
         glscale(0.1, 0.01, 0.28);
         cube();
      glpopmatrix();
   
      //head
      glpushmatrix();
         gltranslate(0.75, 0.1, -0.4);
         glcolor(0.2, 0.2, 0.2);
         cylinder(0.35, 0.1);
         glcolor(1, 1, 1);
         cylinder(0.14, 0.21);
         
         glscale(0.5, 1, 0.5);
         gltranslate(0.0, 0.2, 0.0);
         glrotate(-40 + sin(t * 5), 0, 1, 0);
         gltranslate(0, 0, .9);
         glscale(0.06, 0.02, 1.4);
         glcolor(1, 1, 1);
         cube();
      glpopmatrix();
   
   
      glPushMatrix();
         //white box
         glscale(1.4, 0.13, 0.85);
         glcolor(1, 1, 1);
   
         cube();
         feet(1, 1);
         feet(-1, -1);
         feet(1, -1);
         feet(-1, 1);
      glPopMatrix();

   glpopmatrix();

}

feet(x, y)
{
   glpushmatrix();
      gltranslate(x * 0.90, -1.6, y * 0.90);
      glscale(0.7, 1, 1);

      glcolor(0, 0, 0);
      cylinder(0.14, 0.5);
      glcolor(0.5, 0.5, 0.5);
      cylinder(0.12, 0.7);
   glpopmatrix();
}

cylinder(rad, h)
{
   glbegin(GL_QUAD_STRIP);
   for (i = 0; i < 30; i++)
   {
      r = i / 30 * 2 * PI;
      glvertex(cos(r) * rad, 0, sin(r) * rad);
      glvertex(cos(r) * rad, h, sin(r) * rad);
   }
   glend();

   glbegin(GL_TRIANGLE_FAN);
   for (i = 0; i < 30; i++)
   {
      r = i / 30 * 2 * PI;
      glTexCoord(0.3 + cos(r) * rad, 0.3 + sin(r) * rad);
      glvertex(cos(r) * rad, h, sin(r) * rad);
   }
   glend();
}


cube()
{
   glBegin(GL_QUADS);
      glTexCoord(1.0, 0.0); glVertex( 1.0, 1.0,-1.0);
      glTexCoord(1.0, 1.0); glVertex(-1.0, 1.0,-1.0);
      glTexCoord(0.0, 1.0); glVertex(-1.0, 1.0, 1.0);
      glTexCoord(0.0, 0.0); glVertex( 1.0, 1.0, 1.0);
   glEnd();
   glBegin(GL_QUADS);
      glTexCoord(1.0, 0.0); glVertex( 1.0,-1.0, 1.0);
      glTexCoord(1.0, 1.0); glVertex(-1.0,-1.0, 1.0);
      glTexCoord(0.0, 1.0); glVertex(-1.0,-1.0,-1.0);
      glTexCoord(0.0, 0.0); glVertex( 1.0,-1.0,-1.0);
   glEnd();
   glBegin(GL_QUADS);
      glTexCoord(1.0, 0.0); glVertex( 1.0, 1.0, 1.0);
      glTexCoord(1.0, 1.0); glVertex(-1.0, 1.0, 1.0);
      glTexCoord(0.0, 1.0); glVertex(-1.0,-1.0, 1.0);
      glTexCoord(0.0, 0.0); glVertex( 1.0,-1.0, 1.0);
   glEnd();
   glBegin(GL_QUADS);
      glTexCoord(1.0, 0.0); glVertex( 1.0,-1.0,-1.0);
      glTexCoord(1.0, 1.0); glVertex(-1.0,-1.0,-1.0);
      glTexCoord(0.0, 1.0); glVertex(-1.0, 1.0,-1.0);
      glTexCoord(0.0, 0.0); glVertex( 1.0, 1.0,-1.0);
   glEnd();
   glBegin(GL_QUADS);
      glTexCoord(1.0, 0.0); glVertex(-1.0, 1.0, 1.0);
      glTexCoord(1.0, 1.0); glVertex(-1.0, 1.0,-1.0);
      glTexCoord(0.0, 1.0); glVertex(-1.0,-1.0,-1.0);
      glTexCoord(0.0, 0.0); glVertex(-1.0,-1.0, 1.0);
   glEnd();
   glBegin(GL_QUADS);
      glTexCoord(1.0, 0.0); glVertex( 1.0, 1.0,-1.0);
      glTexCoord(1.0, 1.0); glVertex( 1.0, 1.0, 1.0);
      glTexCoord(0.0, 1.0); glVertex( 1.0,-1.0, 1.0);
      glTexCoord(0.0, 0.0); glVertex( 1.0,-1.0,-1.0);
   glEnd();

}

@v: ================================

varying vec4 p, c ,t;

void main(){
 gl_Position = ftransform();
 c = gl_Color;
 p = gl_Position;
 t = gl_MultiTexCoord0;
}

@f: ================================

varying vec4 p, c, t;

void main()
{

   float tt = t.t - 0.5;
   float ss = t.s - 0.5;
   float w = (pow(cos(tt * 3.1) * cos(ss * 3.1), 0.2)) * 0.6;
   float l = min(100.0 / pow(p.p, 3.0), 4.8);

   gl_FragColor = c * w * min(l, 3.0); 
}

@

uniform sampler2D tex0;
varying vec4 p, c, t;

void main()
{
   vec4 color = texture2D(tex0, t.st);

   float dec = 0.005; 
   dec += sin(color.x * 12.0) * 0.01;

   for (int i = 0; i < 10; i++)
   {
      float v = float(i);
      color += texture2D(tex0, vec2(t.s + cos(v) * dec, t.t + sin(v) * dec));
   }
   vec4 final = vec4(pow(color.r, 1.2) / 20.0, pow(color.g, 1.2) / 20.0, pow(color.b, 1.2) / 20.0, 1.0);
   gl_FragColor = final;
}
