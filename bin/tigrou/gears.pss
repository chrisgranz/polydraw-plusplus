//tigrou 02.01.2010 (tigrou.ind at gmail.com)
()
{
   glsetshader(0);
   glcapture();
   scene();
   glcaptureend(0);

   glsetshader(1);
   glquad();

}

scene()
{
   static a, da, t;
 
   oldt = t;
   t = klock();
   dt = t - oldt;

   if( t < 15) 
   {
      //accelerate
      if(da < 4)    
         da += dt;
      else
         da = 4;
   }   
   else 
   {
      //break
      if(oldt < 15)
      {
         oldt = 15;
         dt = t - oldt;
      }
      da *= exp(-dt * 0.5);
   }

   a  += da * dt; 
   gltranslate(-t, 0, -25);
   glrotate(10, 1, 0, 0);   

  // glrotate(90, 1, 0, 0);   

   glscale(0.05, 0.05, 0.05);
   drawgear(0, 0, 8, a * 10, 0, 10, da / 450);
}


drawgear(px, py, radius, ang, level, height, blur)
{
   inc = (2 * PI) / radius;
   teethsize = 20;
   a = ang + inc * 1.5;


   //draw exterior/main part
   glbegin(GL_TRIANGLE_STRIP);
      n = 0;
      for (i = 0; i <= 2 * PI + inc; i += inc)
      {
         xx = (n % 4 > 1);
         outerradius = radius + xx * teethsize;
   
         glcolor(abs(sin((n) * 122)) * 20, xx, blur);
         for (j = 0; j <= 4; j++)
         {
            glvertex(px + cos(i + a) * outerradius, py + sin(i + a) * outerradius, -height);
            glvertex(px + cos(i + a) * outerradius, py + sin(i + a) * outerradius,  height);
         }
         n = n + 1;
      }
   glend();



   nrd = radius * 0.8;
   glcolor(0.2, 0, blur);

   //draw teeth face
   glbegin(GL_TRIANGLE_STRIP);
      n = 0;
      for (i = 0; i < 2 * PI + inc; i += inc)
      {
         outerradius = radius + (n % 4 > 1) * teethsize;        
         glvertex(px + cos(i + a) * outerradius,  py + sin(i + a) * outerradius,  height);
         glvertex(px + cos(i + a) * nrd,          py + sin(i + a) * nrd, height);
         n = n + 1;
      }
   glend();
   //draw teeth face
   glbegin(GL_TRIANGLE_STRIP);
      n = 0;
      for (i = 0; i < 2 * PI + inc; i += inc)
      {
         outerradius = radius + (n % 4 > 1) * teethsize;
         glvertex(px + cos(i + a) * outerradius,  py + sin(i + a) * outerradius,  -height);
         glvertex(px + cos(i + a) * nrd,          py + sin(i + a) * nrd, -height);
         n = n + 1;
      }
   glend();


   //draw tube inside gears   
   glbegin(GL_TRIANGLE_STRIP);
      for (i = 0; i < 2 * PI + inc; i += inc)
      {
         glcolor(0.7-sin(i/radius)*0.7, 0, blur);
         glvertex(px + cos(i + a) * nrd, py + sin(i + a) * nrd, -height);
         glvertex(px + cos(i + a) * nrd, py + sin(i + a) * nrd,  height);
      }
   glend();


   //draw next gears
   nradius = radius + 4;
   ratio = nradius / radius;

   delta = ((radius + nradius + teethsize * 2) - teethsize * 0.9);
   ninc = (2 * PI) / nradius;

   a = sin(level);
   nang = -(ang - a * (ratio + 1)) / ratio + (level % 2 == 1) * inc * 2;

   if (level < 12) 
      drawgear(px + cos(a) * delta, 
             py + sin(a) * delta, nradius, nang, level + 1, height + 15, blur);

}


@v: ====================================
varying vec4 p, c, t;

void main()
{
   gl_Position = ftransform();
   p = gl_Position;
   c = gl_Color;
   t = gl_MultiTexCoord0;
}

@f: ====================================
varying vec4 p, c, t;

void main()
{
   gl_FragColor = c;
}

@f2: ===================================

varying vec4 p, c, t;
uniform sampler2D tex0;

void main()
{
   vec4 cc;
   float n = 30.0;
   float a = c.b;
   for(float i = 0.0; i < 2.0 * 3.14 ; i += 2.0 * 3.14 / n)
   {
     cc += texture2D(tex0, vec2(t.s+sin(i) * a,t.t + cos(i) * a));
   }
   float l = (cc.r+cc.g+cc.b)/n;
   gl_FragColor = vec4(vec3(0.4, 0.7, 1.0) * l, 1.0);
}