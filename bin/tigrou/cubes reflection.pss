//tigrou 14.05.2011 (tigrou.ind at gmail.com)
gluniform1f(glgetuniformloc("yxaspect"),yres/xres);
glcolor(klock() / 1.3, 0, 0);
glquad();

@vertex_shader: ================================
varying vec4 p, c;

void main ()
{
	gl_Position = ftransform();
	p = gl_Position;
	c = gl_Color;   
}

@fragment_shader: ================================

varying vec4 p, c;
uniform float yxaspect;

vec3 rx(vec3 p, float a)
{
	float c, s;
	vec3 q = p;

	c = cos(a); 
	s = sin(a);
	p.y = c * q.y - s * q.z;
	p.z = s * q.y + c * q.z;
	return p;
}

vec3 ry(vec3 p, float a) 
{
	float c, s;
	vec3 q = p;

	c = cos(a); 
	s = sin(a);
	p.x = c * q.x - s * q.z;
	p.z = s * q.x + c * q.z;
	return p;
}

float cube(vec3 p,vec3 size)
{
	return max(max(abs(p.x) - size.x, abs(p.y) - size.y), abs(p.z) - size.z);
}

float f(vec3 p)
{
	p = rx(p, c.r / 10.0);
	p = ry(p, c.r / 4.0);
	p = mod(p, 1.0) - 0.5;

	float c  = cube(p, vec3(0.25));
	return c;
}

bool ray(inout float t,vec3 ro, vec3 rd, inout vec3 color, inout vec3 h, inout vec3 n)
{
	for (int steps = 0; steps < 70; steps++)
	{
		float d = f(ro  + t * rd);
		if (d < 0.001) 
		{
			float e = 0.03;
			h = ro + t * rd;
			n = vec3(f(h + vec3(e,   0.0, 0.0)) - f(h - vec3(e,   0.0, 0.0)), 
					   f(h + vec3(0.0, e,   0.0)) - f(h - vec3(0.0, e,   0.0)), 
					   f(h + vec3(0.0, 0.0, e))   - f(h - vec3(0.0, 0.0, e)));
			n = normalize(n);            
						  
			float c = dot(n, vec3(1.0))/ max(t*t*t, 1.0);
			color = mix(vec3(0.0, 0.0, 0.02), vec3(1.0, 0.6, 0.0), c);
			return true;
		}

		t += d * 0.7;
	}

	return false;
}

void main(void)
{
	vec3 colorA = vec3(0.0);
	vec3 colorB = vec3(0.0);

	vec3 ro = vec3(0.0, 0.0 ,1.0);   
	vec3 rd = vec3(p.x, p.y*yxaspect, -1.0);

	float t = 0.0;

	vec3 h, n;
	if (ray(t, ro, rd, colorA, h, n))
	{
		ro = h;
		rd = reflect(rd, n);
		ray(t, ro, rd, colorB, h, n);
	}

	gl_FragColor = vec4(colorA+dot(colorB, vec3(1.0)), 1.0);  
}

